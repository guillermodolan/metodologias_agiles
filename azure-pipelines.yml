# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  - group: GITHUB_TOKEN

strategy:
  matrix:
    Python311:
      python.version: '3.11'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- script: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt
  displayName: 'Install dependencies'

- script: |
    # Instalar ChromeDriver
    CHROME_DRIVER_VERSION=$(curl -sS https://chromedriver.storage.googleapis.com/LATEST_RELEASE)
    wget -N https://chromedriver.storage.googleapis.com/$CHROME_DRIVER_VERSION/chromedriver_linux64.zip -P ~/tmp
    unzip ~/tmp/chromedriver_linux64.zip -d ~/tmp
    sudo mv -f ~/tmp/chromedriver /usr/local/bin/chromedriver
    sudo chown root:root /usr/local/bin/chromedriver
    sudo chmod 0755 /usr/local/bin/chromedriver
  displayName: 'Install ChromeDriver'

- script: |
    # Instalar Google Chrome
    wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
    sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
    sudo apt-get update
    sudo apt-get install -y google-chrome-stable
  displayName: 'Install Google Chrome'

- script: |
    google-chrome --version
    chromedriver --version
  displayName: 'Check Chrome and ChromeDriver Versions'

- script: |
    pip install pylint
    pylint --exit-zero $(Build.SourcesDirectory)/tpi_ahorcado --output-format=parseable > $(Build.SourcesDirectory)/pylint-report.txt
  displayName: 'Run Pylint Static Code Analysis'

- script: |
    pip install pytest pytest-cov pytest-azurepipelines
    pytest --cov=. --cov-report xml
  displayName: 'Run tests with coverage'

- script: |
    pip install -r requirements.txt
    pip install pytest pytest-cov pytest-azurepipelines
    pytest acceptance_tests.py --cov=. --cov-report xml
  displayName: 'Run Acceptance Tests with coverage'
  
  # Configurar git y subir el archivo a GitHub 
- script: |
    # Configurar git
    git config --global user.name "guillermodolan"
    git config --global user.email "guillermo230899@gmail.com"

    git clone https://$(GITHUB_TOKEN)@github.com/guillermodolan/metodologias_agiles.git $(Build.SourcesDirectory)/repo

    mv $(Build.SourcesDirectory)/pylint-report.txt $(Build.SourcesDirectory)/repo/
    cd $(Build.SourcesDirectory)/repo
    git add pylint-report.txt
    git commit -m "Add pylint report"
    git push origin main
  displayName: 'Push Pylint Report to GitHub'
  env:
    GITHUB_TOKEN: $(GITHUB_TOKEN)

- task: PublishTestResults@2
  inputs:
    testResultsFiles: '**/test-*.xml'
    testRunTitle: 'Publish Test Results'
    testResultsFormat: 'JUnit'
  displayName: 'Publish test results'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/coverage.xml'
    reportDirectory: '$(Build.SourcesDirectory)/coverage-report'
  displayName: 'Publish Code Coverage Results'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: '**/test-acceptance*.xml'
    testRunTitle: 'Acceptance Tests Results'
    testResultsFormat: 'JUnit'
  displayName: 'Publish Acceptance Test Results'