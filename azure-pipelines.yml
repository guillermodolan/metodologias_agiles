# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  - group: GITHUB_TOKEN

strategy:
  matrix:
    Python311:
      python.version: '3.11'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
    addToPath: True
  displayName: 'Use Python $(python.version)'

- script: |
    python -m venv .venv
    source .venv/bin/activate
    python -m pip install --upgrade pip
    pip install -r requirements.txt
    pip install selenium pytest
  displayName: 'Install dependencies'


- script: |
    pip install pylint
    pylint --exit-zero $(Build.SourcesDirectory)/tpi_ahorcado --output-format=parseable > $(Build.SourcesDirectory)/pylint-report.txt
  displayName: 'Run Pylint Static Code Analysis'

- script: |
    pip install pytest pytest-cov pytest-azurepipelines
    pytest --cov=. --cov-report xml
  displayName: 'Run tests with coverage'
  
- script: |
    wget https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_linux64.zip
    unzip chromedriver_linux64.zip
    sudo mv chromedriver /usr/local/bin/chromedriver
  displayName: 'Install ChromeDriver'

- script: |
    timeout 10 nohup python $(Build.SourcesDirectory)/tpi_ahorcado/front-end/app.py &
    sleep 5
  displayName: 'Start Flask Server with Timeout'

- script: |
    curl http://127.0.0.1:5000
  displayName: 'Check Flask Server Health'

- script: |
    pytest $(Build.SourcesDirectory)/tpi_ahorcado/front-end/acceptance_tests.py --maxfail=5 --disable-warnings --cov=app --cov-report term-missing -v > $(Build.SourcesDirectory)/acceptance-test-results.txt
  displayName: 'Run Acceptance Tests with Debug'

- script: |
    pkill -f "python $(Build.SourcesDirectory)/tpi_ahorcado/front-end/app.py"
  displayName: 'Stop Flask Server'
  condition: always()
  
  # Configurar git y subir el archivo a GitHub 
- script: |
    git config --global user.name "guillermodolan"
    git config --global user.email "guillermo230899@gmail.com"

    git clone https://$(GITHUB_TOKEN)@github.com/guillermodolan/metodologias_agiles.git $(Build.SourcesDirectory)/repo

    mv $(Build.SourcesDirectory)/acceptance-test-results.txt $(Build.SourcesDirectory)/repo/
    cd $(Build.SourcesDirectory)/repo
    git add acceptance-test-results.txt
    git commit -m "Add acceptance test results"
    git push origin main
  displayName: 'Push Acceptance Test Results to GitHub'
  env:
    GITHUB_TOKEN: $(GITHUB_TOKEN)

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/TEST-*.xml'
    mergeTestResults: true
    failTaskOnFailedTests: true

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/coverage.xml'
    reportDirectory: '$(Build.SourcesDirectory)/coverage-report'
  displayName: 'Publish Code Coverage Results'