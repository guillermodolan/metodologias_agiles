
# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  - group: GITHUB_TOKEN

strategy:
  matrix:
    Python311:
      python.version: '3.11'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- script: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt
  displayName: 'Install dependencies'

- script: |
    sudo apt-get update
    sudo apt-get install -y chromium-browser
    CHROME_VERSION=$(chromium-browser --version | awk '{print $2}' | cut -d'.' -f1-3)
    CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION")
    wget -N "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip" -P ~/
    unzip ~/chromedriver_linux64.zip -d ~/
    rm ~/chromedriver_linux64.zip
    sudo mv -f ~/chromedriver /usr/local/bin/chromedriver
    sudo chown root:root /usr/local/bin/chromedriver
    sudo chmod 0755 /usr/local/bin/chromedriver
    chromedriver --version
    which chromedriver
  displayName: 'Install Chrome and ChromeDriver'

- script: |
    pip install pylint
    pylint --exit-zero $(Build.SourcesDirectory)/tpi_ahorcado --output-format=parseable > $(Build.SourcesDirectory)/pylint-report.txt
  displayName: 'Run Pylint Static Code Analysis'

- script: |
    pip install pytest pytest-cov pytest-azurepipelines
    pytest --cov=. --cov-report xml
  displayName: 'Run unit tests with coverage'

- script: |
    export PATH=$PATH:/usr/local/bin
    python acceptance_tests.py > acceptance_test_results.txt
    echo "Acceptance Test Results:"
    cat acceptance_test_results.txt
    if grep -q "FAILED" acceptance_test_results.txt; then
      echo "##vso[task.complete result=Failed;]Some acceptance tests failed"
    else
      echo "##vso[task.complete result=Succeeded;]All acceptance tests passed"
    fi
  displayName: 'Run acceptance tests'

# Configurar git y subir el archivo a GitHub 
- script: |
    # Configurar git
    git config --global user.name "guillermodolan"
    git config --global user.email "guillermo230899@gmail.com"

    git clone https://$(GITHUB_TOKEN)@github.com/guillermodolan/metodologias_agiles.git $(Build.SourcesDirectory)/repo

    mv $(Build.SourcesDirectory)/pylint-report.txt $(Build.SourcesDirectory)/repo/
    mv $(Build.SourcesDirectory)/acceptance_test_results.txt $(Build.SourcesDirectory)/repo/
    cd $(Build.SourcesDirectory)/repo
    git add pylint-report.txt acceptance_test_results.txt
    git commit -m "Add pylint report and acceptance test results"
    git push origin main
  displayName: 'Push Pylint Report and Acceptance Test Results to GitHub'
  env:
    GITHUB_TOKEN: $(GITHUB_TOKEN)

- task: PublishTestResults@2
  inputs:
    testResultsFiles: '**/test-*.xml'
    testRunTitle: 'Publish Test Results'
    testResultsFormat: 'JUnit'
  displayName: 'Publish test results'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/coverage.xml'
    reportDirectory: '$(Build.SourcesDirectory)/coverage-report'
  displayName: 'Publish Code Coverage Results'
